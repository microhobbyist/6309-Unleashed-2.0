Name     MainMemDecode ;
PartNo   ATF22V10C ;
Date     2025-09-16 ;
Revision v4.1 ;
Designer Frederic Segard ;
Company  MicroHobbyist ;
Assembly None ;
Location None ;
Device   g22v10 ;

/* =========================================================
   Memory & I/O Address Decoder (6809 System)
   ---------------------------------------------------------
   - Decodes address regions and generates active-LOW selects.
   - Early decode on VMA = (Q OR E) for timely chip selects.
   - !RD / !WR are qualified by E only (bus data phase).
   - Address windowing uses A15..A4 (4KB “pages” of 16 bytes).
   ========================================================= */

/* WinCUPL Options (suggested):
      General: Deactivate Unused OR Terms, One-hot-bit State Machine
      Minimization: Presto
      Optimization: Best for Polarity, Keep XOR Equations
*/

/* =========================================================
   1) PINOUT / SYSTEM OVERVIEW (24-pin DIP)
   ----------------------------------------------------------
     E   i---|1     24|---p  Vcc
     Q   i---|2     23|---o  !CONST
     RW  i---|3     22|---o  !IORQ
     A15 i---|4     21|---o  !MREQ
     A14 i---|5     20|---o  !ROMaddr
     A13 i---|6     19|---o  !RAMaddr
     A12 i---|7     18|---o  !RD
     A11 i---|8     17|---o  !WR
     A10 i---|9     16|---i  A4  
     A9  i---|10    15|---i  A5
     A8  i---|11    14|---i  A6
     GND p---|12    13|---i  A7

   E,Q : CPU quadrature clocks (Q leads E).  Q gives early decode.
   RW  : Read(1)/Write(0).
   A15..A4 : Address bus MSBs (A3..A0 unused here).
   Outputs are active-LOW selects and strobes.
   ========================================================= */

/* =========================================================
   2) INPUT / OUTPUT DECLARATIONS
   ========================================================= */

/* Inputs */
PIN 1  = E    ;    /* CPU E clock (data phase)                */
PIN 2  = Q    ;    /* CPU Q clock (address/early phase)       */
PIN 3  = RW   ;    /* Read=1 / Write=0                        */
PIN 4  = A15  ;
PIN 5  = A14  ;
PIN 6  = A13  ;
PIN 7  = A12  ;
PIN 8  = A11  ;
PIN 9  = A10  ;
PIN 10 = A9   ;
PIN 11 = A8   ;
PIN 13 = A7   ;
PIN 14 = A6   ;
PIN 15 = A5   ;
PIN 16 = A4   ;

/* Outputs (active-LOW at the pin) */
PIN 23 = !CONST   ;  /* Constant window ($FE00–$FFFF) for MMU/regs */
PIN 22 = !IORQ    ;  /* I/O request (active during $FF00–$FFEF)    */
PIN 21 = !MREQ    ;  /* Memory request (all except I/O)            */
PIN 20 = !ROMaddr ;  /* ROM address window ($0000–$DFFF)           */
PIN 19 = !RAMaddr ;  /* RAM address window ($E000–$FDFF)           */
PIN 18 = !RD      ;  /* Read strobe, E-qualified                   */
PIN 17 = !WR      ;  /* Write strobe, E-qualified                  */

/* =========================================================
   3) ADDRESS FIELD & COMMON QUALIFIERS
   ========================================================= */

/* A15..A4 form a 12-bit page index (each step = 16 bytes) */
FIELD ADDR = [A15..A4] ;

/* VMA = “valid memory address” phase: assert selects during Q or E.
   (Use !RD/!WR for data-valid strobes during E only.) */
VMA = Q # E ;

/* I/O page = $FF00–$FFEF → ADDR = $FF0..$FFE (excludes $FFF = vectors) */
IOrange = ADDR:[FF0..FFD] ;

/* =============================================================
   4) REGION DECODE (active-HIGH internal)
   ---------------------------------------------------------
   IORQ   : $FF00–$FFEF (240 bytes) — vectors ($FFF0–$FFFF) excluded
   MREQ   : everything else ($0000–$FEEF and $FFF0–$FFFF)
   CONST  : $FE00–$FFFF (512 bytes) — overlaps I/O and vectors
   ROMaddr: $0000–$DFFF (56 KB) — firmware update window
   RAMaddr: $E000–$FDFF (7.5 KB) — staging area for updater/vars
   ============================================================= */

IORQ    =  IOrange & VMA ;
MREQ    = !IOrange & VMA ;
CONST   =  ADDR:[FC0..FFF] & VMA ;
ROMaddr =  ADDR:[000..DFF] & VMA ;
RAMaddr =  ADDR:[E00..FBF] & VMA ;

/* =========================================================
   5) READ / WRITE STROBES (E-qualified)
   ---------------------------------------------------------
   Assert only during E; combine with selects as needed externally.
   ========================================================= */

RD = RW  & E ;
WR = !RW & E ;

/* =========================================================
   6) END OF FILE
   ========================================================= */
